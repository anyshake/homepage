"use strict";(self.webpackChunkanyshake=self.webpackChunkanyshake||[]).push([[957],{5392:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>u});var i=t(5893),o=t(1151);const r={sidebar_position:2},s="Quick Start",a={id:"AnyShake Observer/quick-start",title:"Quick Start",description:"You need to configure AnyShake Observer after installing it. Here is a quick configuration for a demo run. You may need modify it according to your environment.",source:"@site/docs/AnyShake Observer/quick-start.md",sourceDirName:"AnyShake Observer",slug:"/AnyShake Observer/quick-start",permalink:"/docs/AnyShake Observer/quick-start",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/docs/AnyShake Observer/installation"},next:{title:"CLI Interface",permalink:"/docs/AnyShake Observer/cli-interface"}},c={},u=[{value:"Configuration",id:"configuration",level:2},{value:"Runnning",id:"runnning",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"quick-start",children:"Quick Start"}),"\n",(0,i.jsx)(n.p,{children:"You need to configure AnyShake Observer after installing it. Here is a quick configuration for a demo run. You may need modify it according to your environment."}),"\n",(0,i.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsxs)(n.p,{children:["The configuration file is in JSON format. You can use any text editor to edit it. The demo configuration is taken from ",(0,i.jsx)(n.a,{href:"https://github.com/anyshake/observer/releases/tag/Release_v2.2.6p-0b9335e6",children:"v2.2.6"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "station_settings": {\n        "uuid": "a373e39c-8e15-44ae-a1ad-6fb622bc49e6", // UUID of the station, you can generate it with `uuidgen` command, or pick one from uuidgenerator.net\n        "name": "Test Station", // Name of the station, will be displayed on the web page\n        "latitude": 39.9, // Latitude of the station\n        "longitude": 116.3, // Longitude of the station\n        "altitude": 0 // Altitude of the station\n    },\n    "geophone_settings": {\n        "ehz": {\n            "sensitivity": 0.288, // Sensitivity of the geophone, in V/cm/s, can be found in the datasheet of the geophone\n            "damping": 0.56, // Damping rate of the geophone, can be found in the datasheet of the geophone\n            "frequency": 4.5 // Natural frequency of the geophone, can be found in the datasheet of the geophone\n        }, // Geophone settings for EHZ channel\n        "ehe": {\n            "sensitivity": 0.288,\n            "damping": 0.56,\n            "frequency": 4.5\n        }, // Geophone settings for EHE channel\n        "ehn": {\n            "sensitivity": 0.288,\n            "damping": 0.56,\n            "frequency": 4.5\n        } // Geophone settings for EHN channel\n    },\n    "adc_settings": {\n        "resolution": 27, // ADC resolution, in bits\n        "fullscale": 5.0 // ADC full scale, in V\n    },\n    "serial_settings": {\n        "packet": 4, // Channel packet length, must be same with AnyShake Explorer\n        "baud": 19200, // Serial baud rate, must be same with AnyShake Explorer\n        "device": "/dev/ttyUSB0" // Serial device, in Linux, it is usually starts with /dev/tty, in Windows, it is usually starts with COM\n    },\n    "ntpclient_settings": {\n        "host": "0.pool.ntp.org", // NTP server host\n        "port": 123, // NTP server port\n        "timeout": 3, // NTP client timeout, in seconds\n        "interval": 5 // NTP client update interval, in seconds\n    },\n    "archiver_settings": {\n        "enable": true, // Enable archiver\n        "engine": "postgresql", // Archiver engine, support PostgreSQL, MySQL, SQLite, MSSQL\n        "host": "127.0.0.1", // Archiver host, leave it empty if you\'re using SQLite\n        "port": 5432, // Archiver port, leave it empty if you\'re using SQLite\n        "username": "postgres", // Archiver username, leave it empty if you\'re using SQLite\n        "password": "passw0rd", // Archiver password, leave it empty if you\'re using SQLite\n        "database": "observer" // Archiver database, set it to the path of SQLite database file if you\'re using SQLite\n    },\n    "server_settings": {\n        "host": "0.0.0.0", // Web server host\n        "port": 8073, // Web server port\n        "cors": true, // Enable CORS\n        "debug": false // Enable debug mode, /api/v1/devel endpoint will be available\n    },\n    "miniseed_settings": {\n        "enable": false, // Enable MiniSEED archiver\n        "path": "/data/miniseed", // MiniSEED archive path\n        "station": "TEST", // MiniSEED station code\n        "network": "XX", // MiniSEED network code\n        "lifecycle": 10 // MiniSEED lifecycle, in days\n    },\n    "seedlink_settings": {\n        "enable": false,\n        "host": "0.0.0.0",\n        "port": 18000,\n        "station": "TEST",\n        "network": "XX",\n        "buffer": "/data/seedlink",\n        "size": 1000\n    } // Ignore this section due to it is not supported yet\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"runnning",children:"Runnning"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["On Windows, configuration file is located in the same directory as AnyShake Observer binary. You may run ",(0,i.jsx)(n.code,{children:"observer.exe"})," without additional parameters."]}),"\n",(0,i.jsxs)(n.li,{children:["On Linux, configuration file is usually located at /usr/local/etc/observer/config.json. Run ",(0,i.jsx)(n.code,{children:"observer --config=/usr/local/etc/observer/config.json"})," in foreground or use other tools such as systemd to run AnyShake Observer as background process."]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>s});var i=t(7294);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);