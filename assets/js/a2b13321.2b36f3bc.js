"use strict";(self.webpackChunkanyshake=self.webpackChunkanyshake||[]).push([[362],{9654:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>o,frontMatter:()=>c,metadata:()=>a,toc:()=>l});var t=s(5893),i=s(1151);const c={sidebar_position:7},r="TCP Forwarder",a={id:"AnyShake Observer/Development/tcp-forwarder",title:"TCP Forwarder",description:"The AnyShake Observer provides a forwarder service that binds to a specific host and port to forward data to other services. This is useful when you want to forward seismic data to other services. The message format is NMEA-like, here is an example:",source:"@site/docs/AnyShake Observer/Development/tcp-forwarder.md",sourceDirName:"AnyShake Observer/Development",slug:"/AnyShake Observer/Development/tcp-forwarder",permalink:"/docs/AnyShake Observer/Development/tcp-forwarder",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Related Libraries",permalink:"/docs/AnyShake Observer/Development/related-lib"}},d={},l=[{value:"Message Format",id:"message-format",level:2},{value:"About Checksum",id:"about-checksum",level:2},{value:"C",id:"c",level:3},{value:"Python",id:"python",level:3},{value:"JavaScript",id:"javascript",level:3},{value:"Go",id:"go",level:3},{value:"Java",id:"java",level:3},{value:"C#",id:"c-1",level:3}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"tcp-forwarder",children:"TCP Forwarder"}),"\n",(0,t.jsx)(n.p,{children:"The AnyShake Observer provides a forwarder service that binds to a specific host and port to forward data to other services. This is useful when you want to forward seismic data to other services. The message format is NMEA-like, here is an example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"$AS,SHAKE,00,EHZ,1724827695208,100,17005,17024,16971,17027,17027,17026,17018,16990,17043,16999,16990,17084,17027,16998,17061,17051,17054,17069,17005,17047,17005,17000,17001,16967,16963,17046,16987,17002,17025,16933,16977,16959,16983,17031,16985,17059,16972,16989,17041,17018,16947,17044,16973,17026,17045,17066,17037,16983,17041,17082,16973,17033,17022,16989,17039,17072,17028,17062,16989,17004,17045,17025,16998,17018,17017,17074,17020,17028,17058,16933,17023,17012,16993,17047,17014,17014,17060,17019,17018,17044,16974,17024,17025,17023,17085,17007,17013,17090,17041,17036,17038,17016,17066,16993,17047,17064,16975,17011,16985,17024,*63\n$AS,SHAKE,00,EHE,1724827695208,100,-396,-409,-404,-369,-389,-366,-390,-386,-373,-400,-404,-371,-386,-401,-390,-381,-390,-390,-389,-385,-391,-398,-388,-390,-399,-408,-395,-393,-416,-406,-391,-396,-397,-398,-395,-378,-373,-401,-389,-393,-403,-400,-407,-375,-387,-382,-369,-407,-410,-396,-384,-382,-417,-420,-388,-404,-419,-402,-404,-412,-404,-414,-397,-397,-395,-395,-388,-399,-395,-423,-385,-399,-406,-404,-396,-406,-392,-400,-401,-370,-419,-410,-390,-403,-379,-406,-413,-394,-379,-394,-392,-413,-367,-380,-399,-394,-415,-365,-390,-381,*CB\n$AS,SHAKE,00,EHN,1724827695208,100,140,173,164,154,140,162,168,170,151,171,161,141,164,171,165,162,163,178,159,165,158,169,177,154,164,171,166,162,169,146,166,146,165,153,159,144,154,148,143,161,147,176,141,149,156,145,169,151,161,174,156,132,172,175,139,157,154,160,160,162,164,171,156,156,158,162,132,153,159,166,153,166,169,168,152,182,172,160,150,164,162,167,151,165,152,151,155,154,155,162,155,146,156,163,154,167,158,141,161,147,*2A\n"})}),"\n",(0,t.jsx)(n.h2,{id:"message-format",children:"Message Format"}),"\n",(0,t.jsxs)(n.p,{children:["In the example above, the message is divided into three lines by ",(0,t.jsx)(n.code,{children:"\\r\\n"}),", each line starts with ",(0,t.jsx)(n.code,{children:"$"})," and ends with a checksum. The message is divided into fields separated by commas."]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Field(s)"}),(0,t.jsx)(n.th,{children:"Example"}),(0,t.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"1"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"$AS"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Network code"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"2"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SHAKE"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Station code"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"3"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"00"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Location code"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"4"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"EHZ"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Channel code"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"5"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"1724827695208"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Timestamp in milliseconds"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"6"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"100"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Sample rate"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"7-106"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"17005,...,17024"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Samples 0-99"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"107"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"*63"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Checksum in hexadecimal"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"about-checksum",children:"About Checksum"}),"\n",(0,t.jsx)(n.p,{children:"To calculate the message checksum, here are some example codes:"}),"\n",(0,t.jsx)(n.h3,{id:"c",children:"C"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nuint8_t getChecksum(const char* message, size_t len, int* err) {\n    uint8_t checksum = 0;\n    *err = 0;\n    char* fields[len];\n    int field_count = 0;\n\n    // Split the message into fields\n    char* message_copy = strdup(message);\n    char* token = strtok(message_copy, ",");\n    while (token != NULL && field_count < len) {\n        fields[field_count++] = token;\n        token = strtok(NULL, ",");\n    }\n\n    // Minimum message fields length is 7 (only 1 sample)\n    if (field_count < 7) {\n        *err = 1;\n        free(message_copy);\n        return 0;\n    }\n\n    // Convert data fields to int32 and calculate checksum\n    for (int i = 6; i < field_count - 1; i++) {\n        int32_t data = atoi(fields[i]);\n        uint8_t* bytes = (uint8_t*)&data;\n        for (size_t j = 0; j < sizeof(int32_t); j++) {\n            checksum ^= bytes[j];\n        }\n    }\n\n    free(message_copy);\n    return checksum;\n}\n\nint main() {\n    const char* message =\n        "$AS,SHAKE,00,EHZ,1724827695208,100,17005,17024,16971,17027,17027,"\n        "17026,17018,16990,17043,16999,16990,17084,17027,16998,17061,17051,"\n        "17054,17069,17005,17047,17005,17000,17001,16967,16963,17046,16987,"\n        "17002,17025,16933,16977,16959,16983,17031,16985,17059,16972,16989,"\n        "17041,17018,16947,17044,16973,17026,17045,17066,17037,16983,17041,"\n        "17082,16973,17033,17022,16989,17039,17072,17028,17062,16989,17004,"\n        "17045,17025,16998,17018,17017,17074,17020,17028,17058,16933,17023,"\n        "17012,16993,17047,17014,17014,17060,17019,17018,17044,16974,17024,"\n        "17025,17023,17085,17007,17013,17090,17041,17036,17038,17016,17066,"\n        "16993,17047,17064,16975,17011,16985,17024,*63";\n\n    // Find checksum index\n    const char* checksum_pos = strchr(message, \'*\');\n    if (!checksum_pos) {\n        fprintf(stderr, "Checksum not found in message\\n");\n        return 1;\n    }\n\n    // Parse message checksum\n    uint8_t msg_checksum;\n    if (sscanf(checksum_pos + 1, "%2hhx", &msg_checksum) != 1) {\n        fprintf(stderr, "Failed to parse message checksum\\n");\n        return 1;\n    }\n\n    int err;\n    uint8_t calc_checksum = getChecksum(message, strlen(message), &err);\n    if (err) {\n        fprintf(stderr, "Error calculating checksum\\n");\n        return 1;\n    }\n\n    printf("Message checksum: 0x%02X, Calculated checksum: 0x%02X\\n",\n           msg_checksum, calc_checksum);\n    return 0;\n}\n\n'})}),"\n",(0,t.jsx)(n.h3,{id:"python",children:"Python"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from struct import pack\n\n\ndef get_checksum(message: str) -> int:\n    fields = message.split(",")\n\n    # Minimum message fields length is 7 (only 1 sample)\n    if len(fields) < 7:\n        raise ValueError("message fields length is less than 7")\n\n    # Convert data fields to int32\n    data_arr = []\n    for field in fields[6:-1]:\n        try:\n            data = int(field)\n        except ValueError as e:\n            raise e\n        data_arr.append(data)\n\n    # Get message checksum by XOR operation\n    checksum = 0\n    for data in data_arr:\n        bytes_data = pack(\'<i\', data)  # int32 little-endian format\n        for byte in bytes_data:\n            checksum ^= byte\n\n    return checksum\n\n\ndef main():\n    message = "$AS,SHAKE,00,EHZ,1724827695208,100,17005,17024,16971,17027,17027,17026,17018,16990,17043,16999,16990,17084,17027,16998,17061,17051,17054,17069,17005,17047,17005,17000,17001,16967,16963,17046,16987,17002,17025,16933,16977,16959,16983,17031,16985,17059,16972,16989,17041,17018,16947,17044,16973,17026,17045,17066,17037,16983,17041,17082,16973,17033,17022,16989,17039,17072,17028,17062,16989,17004,17045,17025,16998,17018,17017,17074,17020,17028,17058,16933,17023,17012,16993,17047,17014,17014,17060,17019,17018,17044,16974,17024,17025,17023,17085,17007,17013,17090,17041,17036,17038,17016,17066,16993,17047,17064,16975,17011,16985,17024,*63"\n\n    # Find checksum index\n    checksum_index = message.find("*")\n    if checksum_index == -1:\n        raise ValueError("checksum not found in message")\n    checksum_index += 1\n\n    msg_checksum = int(message[checksum_index:checksum_index+2], 16)\n    calc_checksum = get_checksum(message)\n    print(f"Message checksum: 0x{msg_checksum:02X}, Calculated checksum: 0x{calc_checksum:02X}")\n\n\nif __name__ == "__main__":\n    main()\n\n'})}),"\n",(0,t.jsx)(n.h3,{id:"javascript",children:"JavaScript"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'function getChecksum(message) {\n    const fields = message.split(\',\');\n\n    // Minimum message fields length is 7 (only 1 sample)\n    if (fields.length < 7) {\n        throw new Error("message fields length is less than 7");\n    }\n\n    // Convert data fields to int32 and calculate checksum\n    let checksum = 0;\n    for (let i = 6; i < fields.length - 1; i++) {\n        let data = parseInt(fields[i], 10);\n        if (isNaN(data)) {\n            throw new Error("Invalid data field: " + fields[i]);\n        }\n\n        // Convert int32 to byte array and XOR\n        let buffer = new ArrayBuffer(4);\n        let view = new DataView(buffer);\n        view.setInt32(0, data, true); // little-endian\n\n        for (let j = 0; j < 4; j++) {\n            checksum ^= view.getUint8(j);\n        }\n    }\n\n    return checksum;\n}\n\nfunction main() {\n    const message = "$AS,SHAKE,00,EHZ,1724827695208,100,17005,17024,16971,17027,17027,17026,17018,16990,17043,16999,16990,17084,17027,16998,17061,17051,17054,17069,17005,17047,17005,17000,17001,16967,16963,17046,16987,17002,17025,16933,16977,16959,16983,17031,16985,17059,16972,16989,17041,17018,16947,17044,16973,17026,17045,17066,17037,16983,17041,17082,16973,17033,17022,16989,17039,17072,17028,17062,16989,17004,17045,17025,16998,17018,17017,17074,17020,17028,17058,16933,17023,17012,16993,17047,17014,17014,17060,17019,17018,17044,16974,17024,17025,17023,17085,17007,17013,17090,17041,17036,17038,17016,17066,16993,17047,17064,16975,17011,16985,17024,*63";\n\n    // Find checksum index\n    const checksumIndex = message.indexOf(\'*\');\n    if (checksumIndex === -1) {\n        throw new Error("checksum not found in message");\n    }\n\n    const msgChecksum = parseInt(message.substring(checksumIndex + 1, checksumIndex + 3), 16);\n    const calcChecksum = getChecksum(message);\n\n    console.log(`Message checksum: 0x${msgChecksum.toString(16).toUpperCase()}, Calculated checksum: 0x${calcChecksum.toString(16).toUpperCase()}`);\n}\n\nmain();\n\n'})}),"\n",(0,t.jsx)(n.h3,{id:"go",children:"Go"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n\t"errors"\n\t"fmt"\n\t"strconv"\n\t"strings"\n\t"unsafe"\n)\n\nfunc getChecksum(message string) (checksum uint8, err error) {\n\tfields := strings.Split(message, ",")\n\n\t// Minimum message fields length is 7 (only 1 sample)\n\tif len(fields) < 7 {\n\t\treturn 0, errors.New("message fields length is less than 7")\n\t}\n\n\t// Convert data fields to int32\n\tvar dataArr []int32\n\tfor _, field := range fields[6 : len(fields)-1] {\n\t\tdata, err := strconv.Atoi(field)\n\t\tif err != nil {\n\t\t\treturn 0, err\n\t\t}\n\t\tdataArr = append(dataArr, int32(data))\n\t}\n\n\t// Get message checksum by XOR operation\n\tfor _, data := range dataArr {\n\t\tbytes := (*[4]byte)(unsafe.Pointer(&data))[:]\n\t\tfor j := 0; j < int(unsafe.Sizeof(int32(0))); j++ {\n\t\t\tchecksum ^= bytes[j]\n\t\t}\n\t}\n\n\treturn checksum, nil\n}\n\nfunc main() {\n\tmessage := "$AS,SHAKE,00,EHZ,1724827695208,100,17005,17024,16971,17027,17027,17026,17018,16990,17043,16999,16990,17084,17027,16998,17061,17051,17054,17069,17005,17047,17005,17000,17001,16967,16963,17046,16987,17002,17025,16933,16977,16959,16983,17031,16985,17059,16972,16989,17041,17018,16947,17044,16973,17026,17045,17066,17037,16983,17041,17082,16973,17033,17022,16989,17039,17072,17028,17062,16989,17004,17045,17025,16998,17018,17017,17074,17020,17028,17058,16933,17023,17012,16993,17047,17014,17014,17060,17019,17018,17044,16974,17024,17025,17023,17085,17007,17013,17090,17041,17036,17038,17016,17066,16993,17047,17064,16975,17011,16985,17024,*63"\n\n\t// Find checksum index\n\tchecksumIndex := strings.Index(message, "*")\n\tif checksumIndex == -1 {\n\t\tpanic("checksum not found in message")\n\t}\n\tchecksumIndex++\n\tmsg_checksum, err := strconv.ParseUint(message[checksumIndex:checksumIndex+2], 16, 8)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tcalc_checksum, err := getChecksum(message)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Printf("Message checksum: 0x%02X, Calculated checksum: 0x%02X\\n", msg_checksum, calc_checksum)\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"java",children:"Java"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import java.nio.ByteBuffer;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Checksum {\n\n    public static int getChecksum(String message) throws Exception {\n        String[] fields = message.split(",");\n\n        // Minimum message fields length is 7 (only 1 sample)\n        if (fields.length < 7) {\n            throw new Exception("Message fields length is less than 7");\n        }\n\n        // Convert data fields to int32\n        List<Integer> dataArr = new ArrayList<>();\n        for (int i = 6; i < fields.length - 1; i++) {\n            try {\n                int data = Integer.parseInt(fields[i]);\n                dataArr.add(data);\n            } catch (NumberFormatException e) {\n                throw new Exception("Failed to parse field to integer", e);\n            }\n        }\n\n        // Get message checksum by XOR operation\n        int checksum = 0;\n        for (int data : dataArr) {\n            byte[] bytes = ByteBuffer.allocate(4).putInt(data).array();\n            for (byte b : bytes) {\n                checksum ^= Byte.toUnsignedInt(b);\n            }\n        }\n\n        return checksum;\n    }\n\n    public static void main(String[] args) {\n        String message = "$AS,SHAKE,00,EHZ,1724827695208,100,17005,17024,16971,17027,17027,17026,17018,16990,17043,16999,16990,17084,17027,16998,17061,17051,17054,17069,17005,17047,17005,17000,17001,16967,16963,17046,16987,17002,17025,16933,16977,16959,16983,17031,16985,17059,16972,16989,17041,17018,16947,17044,16973,17026,17045,17066,17037,16983,17041,17082,16973,17033,17022,16989,17039,17072,17028,17062,16989,17004,17045,17025,16998,17018,17017,17074,17020,17028,17058,16933,17023,17012,16993,17047,17014,17014,17060,17019,17018,17044,16974,17024,17025,17023,17085,17007,17013,17090,17041,17036,17038,17016,17066,16993,17047,17064,16975,17011,16985,17024,*63";\n\n        // Find checksum index\n        int checksumIndex = message.indexOf("*");\n        if (checksumIndex == -1) {\n            throw new RuntimeException("Checksum not found in message");\n        }\n        checksumIndex++;\n        int msgChecksum = Integer.parseInt(message.substring(checksumIndex, checksumIndex + 2), 16);\n\n        try {\n            int calcChecksum = getChecksum(message);\n            System.out.printf("Message checksum: 0x%02X, Calculated checksum: 0x%02X%n", msgChecksum, calcChecksum);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n'})}),"\n",(0,t.jsx)(n.h3,{id:"c-1",children:"C#"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:'using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nclass Checksum\n{\n    static int GetChecksum(string message)\n    {\n        string[] fields = message.Split(\',\');\n\n        // Minimum message fields length is 7 (only 1 sample)\n        if (fields.Length < 7)\n        {\n            throw new Exception("Message fields length is less than 7");\n        }\n\n        // Convert data fields to int32\n        List<int> dataArr = new List<int>();\n        for (int i = 6; i < fields.Length - 1; i++)\n        {\n            if (int.TryParse(fields[i], out int data))\n            {\n                dataArr.Add(data);\n            }\n            else\n            {\n                throw new Exception("Failed to parse field to integer");\n            }\n        }\n\n        // Get message checksum by XOR operation\n        int checksum = 0;\n        foreach (int data in dataArr)\n        {\n            byte[] bytes = BitConverter.GetBytes(data);\n            for (int j = 0; j < bytes.Length; j++)\n            {\n                checksum ^= bytes[j];\n            }\n        }\n\n        return checksum;\n    }\n\n    static void Main(string[] args)\n    {\n        string message = "$AS,SHAKE,00,EHZ,1724827695208,100,17005,17024,16971,17027,17027,17026,17018,16990,17043,16999,16990,17084,17027,16998,17061,17051,17054,17069,17005,17047,17005,17000,17001,16967,16963,17046,16987,17002,17025,16933,16977,16959,16983,17031,16985,17059,16972,16989,17041,17018,16947,17044,16973,17026,17045,17066,17037,16983,17041,17082,16973,17033,17022,16989,17039,17072,17028,17062,16989,17004,17045,17025,16998,17018,17017,17074,17020,17028,17058,16933,17023,17012,16993,17047,17014,17014,17060,17019,17018,17044,16974,17024,17025,17023,17085,17007,17013,17090,17041,17036,17038,17016,17066,16993,17047,17064,16975,17011,16985,17024,*63";\n\n        // Find checksum index\n        int checksumIndex = message.IndexOf(\'*\');\n        if (checksumIndex == -1)\n        {\n            throw new Exception("Checksum not found in message");\n        }\n        checksumIndex++;\n        int msgChecksum = Convert.ToInt32(message.Substring(checksumIndex, 2), 16);\n\n        try\n        {\n            int calcChecksum = GetChecksum(message);\n            Console.WriteLine($"Message checksum: 0x{msgChecksum:X2}, Calculated checksum: 0x{calcChecksum:X2}");\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n        }\n    }\n}\n\n'})})]})}function o(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>a,a:()=>r});var t=s(7294);const i={},c=t.createContext(i);function r(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);